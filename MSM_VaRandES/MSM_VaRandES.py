# -*- coding: utf-8 -*-
"""Spectral risk measures.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zKS8K2l9LdHAoMo7uNIaewIXc5flIuLk
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
from matplotlib.patches import Polygon
import matplotlib.patches as mpatches

# Setting up the figure
plt.figure(figsize=(8, 6))

# Define the log-normal distribution functions
mu, sigma = 0.5, 0.3
def dlognormalLoss(x):
    return stats.lognorm.pdf(x, sigma, scale=np.exp(mu)) # PDF calculation

def plognormalLoss(x):
    return stats.lognorm.cdf(x, sigma, scale=np.exp(mu)) #CDF calculation

# Create x values (loss data) for plotting
x_range = np.linspace(0, 4, 1000)

# Plot the CDF (solid line, lwd=2)
plt.plot(x_range, plognormalLoss(x_range), 'k-', linewidth=2, label='CDF')

# Plot the PDF (dashed line, lty=2, lwd=2)
plt.plot(x_range, dlognormalLoss(x_range), 'k--', linewidth=2, label='PDF')


###############################################################################
###    #calculate VaR                                                     #####
###    Set confidence level                                               #####
###   alpha = 0.1  # This means 90% confidence (1-alpha = 0.9)            #####
###   confidence_level = 1 - alpha                                        #####
###   Calculate VaR (Value at Risk) at 90% confidence level               #####
###    var= stats.lognorm.ppf(confidence_level, sigma, scale=np.exp(mu))  #####
###                                                                       #####
###############################################################################
# Fill in the part beyond VaR with shadow
var_alpha = 2.42 # assumed value
x_tail = np.linspace(var_alpha, 4, 100)
y_tail = dlognormalLoss(x_tail)

# Create polygon for shaded area
x_poly = np.concatenate([[var_alpha], x_tail])
y_poly = np.concatenate([[dlognormalLoss(3)], y_tail])
plt.fill_between(x_poly, 0, y_poly, color='grey', alpha=0.7)

# Add text and arrow
plt.text(2.9, 0.2, r'$P(S > VaR_{\alpha}) = \alpha$', fontsize=12)
plt.annotate('', xy=(2.7, 0.05), xytext=(3, 0.2),
             arrowprops=dict(arrowstyle='->', lw=1, color='black'))

# Add VaR label at bottom
plt.text(var_alpha, -0.1, r'$VaR_{\alpha}$', ha='center', va='top', fontsize=12)

# Mark the Expected Shortfall with hatched polygon
# Create the hatched area
x_es = np.linspace(var_alpha, 4, 100)
y_es = plognormalLoss(x_es)

# Create polygon coordinates for ES area
x_es_poly = np.concatenate([[0], x_es, [0]])
y_es_poly = np.concatenate([[0.9], y_es, [plognormalLoss(4)]])

# Create hatched polygon
es_polygon = Polygon(list(zip(x_es_poly, y_es_poly)),
                     facecolor='grey', alpha=0.3,
                     hatch='///', edgecolor='black')
plt.gca().add_patch(es_polygon)

# Add text annotations
plt.text(0.2, 0.92, r'$1 - \alpha = 0.9$', fontsize=12)
plt.text(1.6, 0.95, r'$\alpha ES_{\alpha}(X)$', fontsize=12)

# Redraw the main curves on top
plt.plot(x_range, plognormalLoss(x_range), 'k-', linewidth=1)
plt.plot(x_range, dlognormalLoss(x_range), 'k--', linewidth=1)

# Add segments (vertical and horizontal lines)
plt.plot([var_alpha, var_alpha], [-0.1, 0.9], 'k-', linewidth=1)
plt.plot([-0.2, var_alpha], [0.9, 0.9], 'k-', linewidth=1)

# Add legend
legend_elements = [
    mpatches.Patch(color='none', label='PDF'),
    mpatches.Patch(color='none', label='CDF')
]
# Create custom legend with line styles
pdf_line = plt.Line2D([0], [0], color='black', linestyle='--', linewidth=1, label='PDF')
cdf_line = plt.Line2D([0], [0], color='black', linestyle='-', linewidth=1, label='CDF')
plt.legend(handles=[pdf_line, cdf_line], loc=(0.62, 0.35), fontsize=10)

# Set labels and limits
plt.xlabel('Loss', fontsize=12)
plt.ylabel('', fontsize=12)
plt.xlim(-0.2, 4.2)
plt.ylim(-0.1, 1.1)

# Set y-axis ticks to match the original
plt.yticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])
plt.xticks([0, 1, 2, 3, 4])

# Adjust layout
plt.tight_layout()
plt.savefig('MSM_VaRandES 2.png', dpi=300, bbox_inches='tight')
plt.show()

# Print some key values for verification
print(f"VaR at the specified level: {var_alpha}")
print(f"CDF at VaR: {plognormalLoss(var_alpha):.3f}")
print(f"PDF at VaR: {dlognormalLoss(var_alpha):.3f}")